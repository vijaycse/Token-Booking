#%RAML 0.8
---
title: Token Booking
version: 1.0
baseUri: http://localhost:8080/api
documentation:
  - title: Getting Started
    content: |
      This sample API has been created as part of your APIkit project. It is located in src/main/api. Feel free to poke around.
/booking:
  displayName: Booking system
  #description: |
  #  CRUD operations on booking token system
  post:
    description: add new token to the system
    body:
      application/json:
       schema: |
                { "$schema": "http://json-schema.org/schema",
                  "userId": "object",
                  "location": "23423dfsd",
                  "toTime": "3434232",
                  "fromTime": "3232343"
                }
          
    responses:
      201:
        body:
          application/json:
             schema: |
                { "$schema": "http://json-schema.org/schema",
                  "UUID": "object"
                }
         
  /{locationId}:
    displayName: location
    description: |
        if the location id is passed, then location specific info will be retrieved ***retrieving booking***
    uriParameters:
      locationId:
        description: |
          Three letter code that identifies the location.
        type: string
        example: BAR
    get:
      responses:
        200:
          body:
            application/json:
               schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "",
                  "some other info" : "info"
                 }
  /{userid}:
    uriParameters:
      userid:
        description: |
          Three letter code that identifies the location.
        type: string
        example: BAR
        required: true
    get:
      responses:
        200:
          body:
            application/json:
               schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "A canonical song",
                  "properties": {
                    "title":  { "type": "string" },
                    "artist": { "type": "string" }
                  },
                  "required": [ "title", "artist" ]
                }
  delete:
    description: deleting hte booking
    queryParameters:
      location:
        type: string
        required: true
        example: location   
    responses:
      204:
          description: |
            The resource has been succesfully removed.
/queue:
  put:
    description: claiming the token
    body:
          application/json:
            schema: |
                { "$schema": "http://json-schema.org/schema",
                  "userId": "object",
                  "location": "A canonical location",
                  "toTime": "3434232",
                  "fromTime": "3232343"
                }
    responses:
      201:
        body:
          application/json:
             schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "A canonical",
                  "properties": {
                    "title":  { "type": "string" },
                    "artist": { "type": "string" }
                  },
                  "required": [ "title", "artist" ]
                }
  delete:
    description: delete the queue
    queryParameters:
      location:
        type: string
        required: true
        example: location 
      userid:
        type: string
        required: true
        example: location   
    responses:
      204:
          description: |
            The resource has been succesfully removed.
            
  /{locationId}:
    displayName: queue
    description: |
      Getting Queue status by location
    uriParameters:
      locationId:
        type: string
        required: true
        example: BAR
    get:
      responses:
        200:
          body:
            application/json:
               schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "A canonical song",
                  "properties": {
                    "title":  { "type": "string" },
                    "artist": { "type": "string" }
                  },
                  "required": [ "title", "artist" ]
                }
  /{locationId}/{userid}:
    displayName: going into the queue
    description: |
      Server will go to sql server and check person's number for queue and respond with UUID Token, queue number, expected to and from time
    uriParameters:
      locationId:
       type: string
      userid:
       type: string
         
    get:
      description:  token details
      responses:
        200:
          body:
            application/json:
               schema: |
                { "$schema": "http://json-schema.org/schema",
                  "type": "object",
                  "description": "A canonical song",
                  "properties": {
                    "title":  { "type": "string" },
                    "artist": { "type": "string" }
                  },
                  "required": [ "title", "artist" ]
                }